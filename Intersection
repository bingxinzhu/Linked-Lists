/*
Given two (singly) linked list, determine if the two lists intersect. Return the intersecting node. 
Note that the intersection is defined based on reference, not value.
*/
/*
We should be careful here that two linked lists may not have same length.
Determine if there's an intersection: Two intersection linked lists will always have the same last nodes.
Finding the intersecting node:
1. run through each lined list to get the lengths and the tails.
2. compare the details. if they are different(by reference, not by value), return immediately that there is no intersection.
3. Set two pointers to the start of each linked list.
4. On the longer linked list, advance its pointer by the difference in lengths.
5. Now, traverse on each linked list until the pointers are the same.
*/
LinkedListNode findIntersection(LinkedListNode list1, LinkedListNode list2) {
	if(list1 == null || list2 == null)  return null;
	Result result1 = getTailAndSize(list1);
	Result result2 = getTailAndSize(list2);
	if(result1.tail != result2.tail)
		return null;

	LinkedListNode shorter = result1.size < result2.size ? list1 : list2;
	LinkedListNode longer = result1.size < result2.size ? list2 : list1;
	longer = getKthNode(longer, Math.abs(result2.size - result1.size));
	while(shorter != longer) {
		shorter = shorter.next;
		longer = longer.next;
	}
	return longer;
}
class result {
	public LinkedListNode tail;
	public int size;
	public result(LinkedListNode tail, int size) {
		this.tail = tail;
		this.size = size;
	}
}
Result getTailAndSize(LinkedListNode list) {
	if(list == null) return null;
	int size = 1;
	LinkedListNode current = list;
	while(current.next != null) {
		size++;
		current = current.next;
	}
	return new Result(current,size);
}

LinkedListNode getKthNode(LinkedListNode head, int k) {
	LinkedListNode current = head;
	while(k > 0 && current != null) {
		current = current.next;
		k--;
	}
	return current;
	
}

